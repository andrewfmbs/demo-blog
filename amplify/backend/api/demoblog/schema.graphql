input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

type Post @model @searchable {
  id: ID!
  postOwner: User! @belongsTo
  postTitle: String!
  postBody: String!
  createdAt: String
  comments: [Comment] @hasMany
  likes: [Like] @hasMany
}

type Comment @model {
  id: ID!
  commentOwnerId: String!
  commentOwnerUsername: String!
  post: Post @belongsTo
  content: String!
  createdAt: String!
}

type Like @model {
  id: ID!
  numberLikes: Int!
  likeOwnerId: String!
  likeOwnerUsername: String!
  post: Post @belongsTo
}

type User @model @searchable {
  id: ID!
  age: Int!
  location: String!
  post: [Post] @hasMany
  name: String!
  cognitoID: String!
}

type BondCard {
  data: BondCardData
}

type BondCardData {
  bondName: String!
  previousClose: String!
  currentPrice: String!
  nineThirtyPrice: String
  tenPrice: String
  tenThirtyPrice: String
  elevenPrice: String
  elevenThirtyPrice: String
}

type Query {
  testHttpCall: BondCard
}

type Subscription {
  subscribeToEventComments(postCommentsId: String!): Comment
    @aws_subscribe(mutations: ["createComment"])
  subscribeToEventNewPost(userPostId: String!): Post
    @aws_subscribe(mutations: ["createPost"])
  subscribeToEventDeletePost(userPostId: String!): Post
    @aws_subscribe(mutations: ["deletePost"])
}
